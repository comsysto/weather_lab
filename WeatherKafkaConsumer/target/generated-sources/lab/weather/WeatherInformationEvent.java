/**
 * Autogenerated by Avro
 *
 * DO NOT EDIT DIRECTLY
 */
package lab.weather;

import org.apache.avro.generic.GenericArray;
import org.apache.avro.specific.SpecificData;
import org.apache.avro.util.Utf8;
import org.apache.avro.message.BinaryMessageEncoder;
import org.apache.avro.message.BinaryMessageDecoder;
import org.apache.avro.message.SchemaStore;

@org.apache.avro.specific.AvroGenerated
public class WeatherInformationEvent extends org.apache.avro.specific.SpecificRecordBase implements org.apache.avro.specific.SpecificRecord {
  private static final long serialVersionUID = -6533351554128876818L;


  public static final org.apache.avro.Schema SCHEMA$ = new org.apache.avro.Schema.Parser().parse("{\"type\":\"record\",\"name\":\"WeatherInformationEvent\",\"namespace\":\"lab.weather\",\"fields\":[{\"name\":\"stationId\",\"type\":\"int\"},{\"name\":\"temperature\",\"type\":\"float\"},{\"name\":\"humidity\",\"type\":\"float\"},{\"name\":\"timestamp\",\"type\":\"long\"}]}");
  public static org.apache.avro.Schema getClassSchema() { return SCHEMA$; }

  private static final SpecificData MODEL$ = new SpecificData();

  private static final BinaryMessageEncoder<WeatherInformationEvent> ENCODER =
      new BinaryMessageEncoder<WeatherInformationEvent>(MODEL$, SCHEMA$);

  private static final BinaryMessageDecoder<WeatherInformationEvent> DECODER =
      new BinaryMessageDecoder<WeatherInformationEvent>(MODEL$, SCHEMA$);

  /**
   * Return the BinaryMessageEncoder instance used by this class.
   * @return the message encoder used by this class
   */
  public static BinaryMessageEncoder<WeatherInformationEvent> getEncoder() {
    return ENCODER;
  }

  /**
   * Return the BinaryMessageDecoder instance used by this class.
   * @return the message decoder used by this class
   */
  public static BinaryMessageDecoder<WeatherInformationEvent> getDecoder() {
    return DECODER;
  }

  /**
   * Create a new BinaryMessageDecoder instance for this class that uses the specified {@link SchemaStore}.
   * @param resolver a {@link SchemaStore} used to find schemas by fingerprint
   * @return a BinaryMessageDecoder instance for this class backed by the given SchemaStore
   */
  public static BinaryMessageDecoder<WeatherInformationEvent> createDecoder(SchemaStore resolver) {
    return new BinaryMessageDecoder<WeatherInformationEvent>(MODEL$, SCHEMA$, resolver);
  }

  /**
   * Serializes this WeatherInformationEvent to a ByteBuffer.
   * @return a buffer holding the serialized data for this instance
   * @throws java.io.IOException if this instance could not be serialized
   */
  public java.nio.ByteBuffer toByteBuffer() throws java.io.IOException {
    return ENCODER.encode(this);
  }

  /**
   * Deserializes a WeatherInformationEvent from a ByteBuffer.
   * @param b a byte buffer holding serialized data for an instance of this class
   * @return a WeatherInformationEvent instance decoded from the given buffer
   * @throws java.io.IOException if the given bytes could not be deserialized into an instance of this class
   */
  public static WeatherInformationEvent fromByteBuffer(
      java.nio.ByteBuffer b) throws java.io.IOException {
    return DECODER.decode(b);
  }

  private int stationId;
  private float temperature;
  private float humidity;
  private long timestamp;

  /**
   * Default constructor.  Note that this does not initialize fields
   * to their default values from the schema.  If that is desired then
   * one should use <code>newBuilder()</code>.
   */
  public WeatherInformationEvent() {}

  /**
   * All-args constructor.
   * @param stationId The new value for stationId
   * @param temperature The new value for temperature
   * @param humidity The new value for humidity
   * @param timestamp The new value for timestamp
   */
  public WeatherInformationEvent(java.lang.Integer stationId, java.lang.Float temperature, java.lang.Float humidity, java.lang.Long timestamp) {
    this.stationId = stationId;
    this.temperature = temperature;
    this.humidity = humidity;
    this.timestamp = timestamp;
  }

  public org.apache.avro.specific.SpecificData getSpecificData() { return MODEL$; }
  public org.apache.avro.Schema getSchema() { return SCHEMA$; }
  // Used by DatumWriter.  Applications should not call.
  public java.lang.Object get(int field$) {
    switch (field$) {
    case 0: return stationId;
    case 1: return temperature;
    case 2: return humidity;
    case 3: return timestamp;
    default: throw new IndexOutOfBoundsException("Invalid index: " + field$);
    }
  }

  // Used by DatumReader.  Applications should not call.
  @SuppressWarnings(value="unchecked")
  public void put(int field$, java.lang.Object value$) {
    switch (field$) {
    case 0: stationId = (java.lang.Integer)value$; break;
    case 1: temperature = (java.lang.Float)value$; break;
    case 2: humidity = (java.lang.Float)value$; break;
    case 3: timestamp = (java.lang.Long)value$; break;
    default: throw new IndexOutOfBoundsException("Invalid index: " + field$);
    }
  }

  /**
   * Gets the value of the 'stationId' field.
   * @return The value of the 'stationId' field.
   */
  public int getStationId() {
    return stationId;
  }


  /**
   * Sets the value of the 'stationId' field.
   * @param value the value to set.
   */
  public void setStationId(int value) {
    this.stationId = value;
  }

  /**
   * Gets the value of the 'temperature' field.
   * @return The value of the 'temperature' field.
   */
  public float getTemperature() {
    return temperature;
  }


  /**
   * Sets the value of the 'temperature' field.
   * @param value the value to set.
   */
  public void setTemperature(float value) {
    this.temperature = value;
  }

  /**
   * Gets the value of the 'humidity' field.
   * @return The value of the 'humidity' field.
   */
  public float getHumidity() {
    return humidity;
  }


  /**
   * Sets the value of the 'humidity' field.
   * @param value the value to set.
   */
  public void setHumidity(float value) {
    this.humidity = value;
  }

  /**
   * Gets the value of the 'timestamp' field.
   * @return The value of the 'timestamp' field.
   */
  public long getTimestamp() {
    return timestamp;
  }


  /**
   * Sets the value of the 'timestamp' field.
   * @param value the value to set.
   */
  public void setTimestamp(long value) {
    this.timestamp = value;
  }

  /**
   * Creates a new WeatherInformationEvent RecordBuilder.
   * @return A new WeatherInformationEvent RecordBuilder
   */
  public static lab.weather.WeatherInformationEvent.Builder newBuilder() {
    return new lab.weather.WeatherInformationEvent.Builder();
  }

  /**
   * Creates a new WeatherInformationEvent RecordBuilder by copying an existing Builder.
   * @param other The existing builder to copy.
   * @return A new WeatherInformationEvent RecordBuilder
   */
  public static lab.weather.WeatherInformationEvent.Builder newBuilder(lab.weather.WeatherInformationEvent.Builder other) {
    if (other == null) {
      return new lab.weather.WeatherInformationEvent.Builder();
    } else {
      return new lab.weather.WeatherInformationEvent.Builder(other);
    }
  }

  /**
   * Creates a new WeatherInformationEvent RecordBuilder by copying an existing WeatherInformationEvent instance.
   * @param other The existing instance to copy.
   * @return A new WeatherInformationEvent RecordBuilder
   */
  public static lab.weather.WeatherInformationEvent.Builder newBuilder(lab.weather.WeatherInformationEvent other) {
    if (other == null) {
      return new lab.weather.WeatherInformationEvent.Builder();
    } else {
      return new lab.weather.WeatherInformationEvent.Builder(other);
    }
  }

  /**
   * RecordBuilder for WeatherInformationEvent instances.
   */
  @org.apache.avro.specific.AvroGenerated
  public static class Builder extends org.apache.avro.specific.SpecificRecordBuilderBase<WeatherInformationEvent>
    implements org.apache.avro.data.RecordBuilder<WeatherInformationEvent> {

    private int stationId;
    private float temperature;
    private float humidity;
    private long timestamp;

    /** Creates a new Builder */
    private Builder() {
      super(SCHEMA$, MODEL$);
    }

    /**
     * Creates a Builder by copying an existing Builder.
     * @param other The existing Builder to copy.
     */
    private Builder(lab.weather.WeatherInformationEvent.Builder other) {
      super(other);
      if (isValidValue(fields()[0], other.stationId)) {
        this.stationId = data().deepCopy(fields()[0].schema(), other.stationId);
        fieldSetFlags()[0] = other.fieldSetFlags()[0];
      }
      if (isValidValue(fields()[1], other.temperature)) {
        this.temperature = data().deepCopy(fields()[1].schema(), other.temperature);
        fieldSetFlags()[1] = other.fieldSetFlags()[1];
      }
      if (isValidValue(fields()[2], other.humidity)) {
        this.humidity = data().deepCopy(fields()[2].schema(), other.humidity);
        fieldSetFlags()[2] = other.fieldSetFlags()[2];
      }
      if (isValidValue(fields()[3], other.timestamp)) {
        this.timestamp = data().deepCopy(fields()[3].schema(), other.timestamp);
        fieldSetFlags()[3] = other.fieldSetFlags()[3];
      }
    }

    /**
     * Creates a Builder by copying an existing WeatherInformationEvent instance
     * @param other The existing instance to copy.
     */
    private Builder(lab.weather.WeatherInformationEvent other) {
      super(SCHEMA$, MODEL$);
      if (isValidValue(fields()[0], other.stationId)) {
        this.stationId = data().deepCopy(fields()[0].schema(), other.stationId);
        fieldSetFlags()[0] = true;
      }
      if (isValidValue(fields()[1], other.temperature)) {
        this.temperature = data().deepCopy(fields()[1].schema(), other.temperature);
        fieldSetFlags()[1] = true;
      }
      if (isValidValue(fields()[2], other.humidity)) {
        this.humidity = data().deepCopy(fields()[2].schema(), other.humidity);
        fieldSetFlags()[2] = true;
      }
      if (isValidValue(fields()[3], other.timestamp)) {
        this.timestamp = data().deepCopy(fields()[3].schema(), other.timestamp);
        fieldSetFlags()[3] = true;
      }
    }

    /**
      * Gets the value of the 'stationId' field.
      * @return The value.
      */
    public int getStationId() {
      return stationId;
    }


    /**
      * Sets the value of the 'stationId' field.
      * @param value The value of 'stationId'.
      * @return This builder.
      */
    public lab.weather.WeatherInformationEvent.Builder setStationId(int value) {
      validate(fields()[0], value);
      this.stationId = value;
      fieldSetFlags()[0] = true;
      return this;
    }

    /**
      * Checks whether the 'stationId' field has been set.
      * @return True if the 'stationId' field has been set, false otherwise.
      */
    public boolean hasStationId() {
      return fieldSetFlags()[0];
    }


    /**
      * Clears the value of the 'stationId' field.
      * @return This builder.
      */
    public lab.weather.WeatherInformationEvent.Builder clearStationId() {
      fieldSetFlags()[0] = false;
      return this;
    }

    /**
      * Gets the value of the 'temperature' field.
      * @return The value.
      */
    public float getTemperature() {
      return temperature;
    }


    /**
      * Sets the value of the 'temperature' field.
      * @param value The value of 'temperature'.
      * @return This builder.
      */
    public lab.weather.WeatherInformationEvent.Builder setTemperature(float value) {
      validate(fields()[1], value);
      this.temperature = value;
      fieldSetFlags()[1] = true;
      return this;
    }

    /**
      * Checks whether the 'temperature' field has been set.
      * @return True if the 'temperature' field has been set, false otherwise.
      */
    public boolean hasTemperature() {
      return fieldSetFlags()[1];
    }


    /**
      * Clears the value of the 'temperature' field.
      * @return This builder.
      */
    public lab.weather.WeatherInformationEvent.Builder clearTemperature() {
      fieldSetFlags()[1] = false;
      return this;
    }

    /**
      * Gets the value of the 'humidity' field.
      * @return The value.
      */
    public float getHumidity() {
      return humidity;
    }


    /**
      * Sets the value of the 'humidity' field.
      * @param value The value of 'humidity'.
      * @return This builder.
      */
    public lab.weather.WeatherInformationEvent.Builder setHumidity(float value) {
      validate(fields()[2], value);
      this.humidity = value;
      fieldSetFlags()[2] = true;
      return this;
    }

    /**
      * Checks whether the 'humidity' field has been set.
      * @return True if the 'humidity' field has been set, false otherwise.
      */
    public boolean hasHumidity() {
      return fieldSetFlags()[2];
    }


    /**
      * Clears the value of the 'humidity' field.
      * @return This builder.
      */
    public lab.weather.WeatherInformationEvent.Builder clearHumidity() {
      fieldSetFlags()[2] = false;
      return this;
    }

    /**
      * Gets the value of the 'timestamp' field.
      * @return The value.
      */
    public long getTimestamp() {
      return timestamp;
    }


    /**
      * Sets the value of the 'timestamp' field.
      * @param value The value of 'timestamp'.
      * @return This builder.
      */
    public lab.weather.WeatherInformationEvent.Builder setTimestamp(long value) {
      validate(fields()[3], value);
      this.timestamp = value;
      fieldSetFlags()[3] = true;
      return this;
    }

    /**
      * Checks whether the 'timestamp' field has been set.
      * @return True if the 'timestamp' field has been set, false otherwise.
      */
    public boolean hasTimestamp() {
      return fieldSetFlags()[3];
    }


    /**
      * Clears the value of the 'timestamp' field.
      * @return This builder.
      */
    public lab.weather.WeatherInformationEvent.Builder clearTimestamp() {
      fieldSetFlags()[3] = false;
      return this;
    }

    @Override
    @SuppressWarnings("unchecked")
    public WeatherInformationEvent build() {
      try {
        WeatherInformationEvent record = new WeatherInformationEvent();
        record.stationId = fieldSetFlags()[0] ? this.stationId : (java.lang.Integer) defaultValue(fields()[0]);
        record.temperature = fieldSetFlags()[1] ? this.temperature : (java.lang.Float) defaultValue(fields()[1]);
        record.humidity = fieldSetFlags()[2] ? this.humidity : (java.lang.Float) defaultValue(fields()[2]);
        record.timestamp = fieldSetFlags()[3] ? this.timestamp : (java.lang.Long) defaultValue(fields()[3]);
        return record;
      } catch (org.apache.avro.AvroMissingFieldException e) {
        throw e;
      } catch (java.lang.Exception e) {
        throw new org.apache.avro.AvroRuntimeException(e);
      }
    }
  }

  @SuppressWarnings("unchecked")
  private static final org.apache.avro.io.DatumWriter<WeatherInformationEvent>
    WRITER$ = (org.apache.avro.io.DatumWriter<WeatherInformationEvent>)MODEL$.createDatumWriter(SCHEMA$);

  @Override public void writeExternal(java.io.ObjectOutput out)
    throws java.io.IOException {
    WRITER$.write(this, SpecificData.getEncoder(out));
  }

  @SuppressWarnings("unchecked")
  private static final org.apache.avro.io.DatumReader<WeatherInformationEvent>
    READER$ = (org.apache.avro.io.DatumReader<WeatherInformationEvent>)MODEL$.createDatumReader(SCHEMA$);

  @Override public void readExternal(java.io.ObjectInput in)
    throws java.io.IOException {
    READER$.read(this, SpecificData.getDecoder(in));
  }

  @Override protected boolean hasCustomCoders() { return true; }

  @Override public void customEncode(org.apache.avro.io.Encoder out)
    throws java.io.IOException
  {
    out.writeInt(this.stationId);

    out.writeFloat(this.temperature);

    out.writeFloat(this.humidity);

    out.writeLong(this.timestamp);

  }

  @Override public void customDecode(org.apache.avro.io.ResolvingDecoder in)
    throws java.io.IOException
  {
    org.apache.avro.Schema.Field[] fieldOrder = in.readFieldOrderIfDiff();
    if (fieldOrder == null) {
      this.stationId = in.readInt();

      this.temperature = in.readFloat();

      this.humidity = in.readFloat();

      this.timestamp = in.readLong();

    } else {
      for (int i = 0; i < 4; i++) {
        switch (fieldOrder[i].pos()) {
        case 0:
          this.stationId = in.readInt();
          break;

        case 1:
          this.temperature = in.readFloat();
          break;

        case 2:
          this.humidity = in.readFloat();
          break;

        case 3:
          this.timestamp = in.readLong();
          break;

        default:
          throw new java.io.IOException("Corrupt ResolvingDecoder.");
        }
      }
    }
  }
}










